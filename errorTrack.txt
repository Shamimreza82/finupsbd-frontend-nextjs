packages - calender vertion problrm 

Component name - 





Deployment Error message  - 











"use client"

import * as React from "react"
import { CalendarIcon, Check, X } from "lucide-react"
import { format } from "date-fns"
import { zodResolver } from "@hookform/resolvers/zod"
import { useForm } from "react-hook-form"
import * as z from "zod"

import { Button } from "@/components/ui/button"
import { Calendar } from "@/components/ui/calendar"
import { Card } from "@/components/ui/card"
import { Checkbox } from "@/components/ui/checkbox"
import { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from "@/components/ui/form"
import { Input } from "@/components/ui/input"
import { Popover, PopoverContent, PopoverTrigger } from "@/components/ui/popover"
import { RadioGroup, RadioGroupItem } from "@/components/ui/radio-group"
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select"
import { cn } from "@/lib/utils"

const formSchema = z.object({
  gender: z.string({
    required_error: "Please select a gender.",
  }),
  dateOfBirth: z.date({
    required_error: "Please select a date of birth.",
  }),
  profession: z.string({
    required_error: "Please select a profession.",
  }),
  jobLocation: z.string().optional(),
  monthlyIncome: z
    .number({
      required_error: "Please enter your monthly income.",
    })
    .min(1, { message: "Monthly income must be greater than 0." }),
  loanTenure: z
    .number({
      required_error: "Please enter the loan tenure.",
    })
    .min(1, { message: "Loan tenure must be greater than 0." }),
  hasLoan: z.string().optional(),
  numberOfLoans: z.string().optional(),
  loanType: z.string().optional(),
  loanOutstanding: z.string().optional(),
  emiAmount: z.string().optional(),
  interestRate: z.string().optional(),
  hasCreditCard: z.string().optional(),
  numberOfCards: z.string().optional(),
  cardLimit: z.string().optional(),
  cardType: z.string().optional(),
  hasRentalIncome: z.string().optional(),
  rentalArea: z.string().optional(),
  rentalIncome: z.string().optional(),
  businessOwnerType: z.string().optional(),
  businessType: z.string().optional(),
  sharePortion: z.string().optional(),
  tradeLicenseAge: z.string().optional(),
  name: z.string({
    required_error: "Please enter your name.",
  }),
  email: z
    .string({
      required_error: "Please enter your email.",
    })
    .email({
      message: "Please enter a valid email address.",
    }),
  phone: z.string({
    required_error: "Please enter your phone number.",
  }),
  termsAccepted: z
    .boolean({
      required_error: "You must accept the terms and conditions.",
    })
    .refine((value) => value === true, {
      message: "You must accept the terms and conditions.",
    }),
})

export default function EligibilityModal() {
  const [step, setStep] = React.useState(1)
  const [formData, setFormData] = React.useState({
    gender: "",
    dateOfBirth: "",
    profession: "",
    jobLocation: "",
    monthlyIncome: "",
    loanTenure: "",
    hasLoan: "no",
    numberOfLoans: "1",
    loanType: "",
    loanOutstanding: "",
    emiAmount: "",
    interestRate: "",
    hasCreditCard: "no",
    numberOfCards: "1",
    cardLimit: "",
    cardType: "",
    hasRentalIncome: "no",
    rentalArea: "",
    rentalIncome: "",
    businessOwnerType: "",
    businessType: "",
    sharePortion: "",
    tradeLicenseAge: "",
    name: "",
    email: "",
    phone: "",
    termsAccepted: false,
  })

  const form = useForm<z.infer<typeof formSchema>>({
    resolver: zodResolver(formSchema),
    defaultValues: {
      gender: "",
      dateOfBirth: undefined,
      profession: "",
      jobLocation: "",
      monthlyIncome: undefined,
      loanTenure: undefined,
      hasLoan: "no",
      numberOfLoans: "1",
      loanType: "",
      loanOutstanding: "",
      emiAmount: "",
      interestRate: "",
      hasCreditCard: "no",
      numberOfCards: "1",
      cardLimit: "",
      cardType: "",
      hasRentalIncome: "no",
      rentalArea: "",
      rentalIncome: "",
      businessOwnerType: "",
      businessType: "",
      sharePortion: "",
      tradeLicenseAge: "",
      name: "",
      email: "",
      phone: "",
      termsAccepted: false,
    },
  })

  function onSubmit(values: z.infer<typeof formSchema>) {
    console.log(values)
  }

  const professions = ["Salaried", "Business Owner"]
  const locations = ["Dhaka", "Chittagong", "Sylhet", "Rajshahi"]
  const loanTypes = ["Personal", "Home", "Car", "Education"]
  const cardTypes = ["Credit", "Debit", "Prepaid"]

  const handleInputChange = (name: string, value: any) => {
    setFormData((prev) => ({ ...prev, [name]: value }))
  }

  const renderStep1 = () => (
    <div className="space-y-4">
      <FormField
        name="gender"
        control={form.control}
        render={({ field }) => (
          <FormItem>
            <FormLabel>Gender*</FormLabel>
            <Select onValueChange={field.onChange} defaultValue={field.value}>
              <FormControl>
                <SelectTrigger>
                  <SelectValue placeholder="Your Gender" />
                </SelectTrigger>
              </FormControl>
              <SelectContent>
                <SelectItem value="male">Male</SelectItem>
                <SelectItem value="female">Female</SelectItem>
                <SelectItem value="other">Other</SelectItem>
              </SelectContent>
            </Select>
            <FormMessage />
          </FormItem>
        )}
      />

      <FormField
        name="dateOfBirth"
        control={form.control}
        render={({ field }) => (
          <FormItem className="flex flex-col">
            <FormLabel>Date of Birth (DD/MM/YYYY)*</FormLabel>
            <Popover>
              <PopoverTrigger asChild>
                <FormControl>
                  <Button
                    variant={"outline"}
                    className={cn("w-full pl-3 text-left font-normal", !field.value && "text-muted-foreground")}
                  >
                    {field.value ? format(field.value, "dd/MM/yyyy") : <span>DD/MM/YY</span>}
                    <CalendarIcon className="ml-auto h-4 w-4 opacity-50" />
                  </Button>
                </FormControl>
              </PopoverTrigger>
              <PopoverContent className="w-auto p-0" align="start">
                <Calendar
                  mode="single"
                  selected={field.value}
                  onSelect={field.onChange}
                  disabled={(date) => date > new Date() || date < new Date("1900-01-01")}
                  initialFocus
                />
              </PopoverContent>
            </Popover>
            <FormMessage />
          </FormItem>
        )}
      />

      <FormField
        name="profession"
        control={form.control}
        render={({ field }) => (
          <FormItem>
            <FormLabel>Your Profession*</FormLabel>
            <Select onValueChange={field.onChange} defaultValue={field.value}>
              <FormControl>
                <SelectTrigger>
                  <SelectValue placeholder="Select Profession" />
                </SelectTrigger>
              </FormControl>
              <SelectContent>
                {professions.map((profession) => (
                  <SelectItem key={profession} value={profession.toLowerCase()}>
                    {profession}
                  </SelectItem>
                ))}
              </SelectContent>
            </Select>
            <FormMessage />
          </FormItem>
        )}
      />

      {formData.profession === "business owner" && (
        <>
          <FormField
            name="businessOwnerType"
            control={form.control}
            render={({ field }) => (
              <FormItem>
                <FormLabel>Business Owner Type*</FormLabel>
                <Select onValueChange={field.onChange} defaultValue={field.value}>
                  <FormControl>
                    <SelectTrigger>
                      <SelectValue placeholder="Select Business owner type" />
                    </SelectTrigger>
                  </FormControl>
                  <SelectContent>
                    <SelectItem value="sole">Sole Proprietorship</SelectItem>
                    <SelectItem value="partnership">Partnership</SelectItem>
                    <SelectItem value="corporation">Corporation</SelectItem>
                  </SelectContent>
                </Select>
                <FormMessage />
              </FormItem>
            )}
          />

          <FormField
            name="businessType"
            control={form.control}
            render={({ field }) => (
              <FormItem>
                <FormLabel>Business Type*</FormLabel>
                <Select onValueChange={field.onChange} defaultValue={field.value}>
                  <FormControl>
                    <SelectTrigger>
                      <SelectValue placeholder="Select" />
                    </SelectTrigger>
                  </FormControl>
                  <SelectContent>
                    <SelectItem value="retail">Retail</SelectItem>
                    <SelectItem value="service">Service</SelectItem>
                    <SelectItem value="manufacturing">Manufacturing</SelectItem>
                  </SelectContent>
                </Select>
                <FormMessage />
              </FormItem>
            )}
          />
        </>
      )}

      <FormField
        name="monthlyIncome"
        control={form.control}
        render={({ field }) => (
          <FormItem>
            <FormLabel>Monthly Income (BDT)*</FormLabel>
            <FormControl>
              <Input type="number" placeholder="0" {...field} />
            </FormControl>
            <FormMessage />
          </FormItem>
        )}
      />

      <FormField
        name="loanTenure"
        control={form.control}
        render={({ field }) => (
          <FormItem>
            <FormLabel>Expected Loan Tenure (Month)*</FormLabel>
            <FormControl>
              <Input type="number" placeholder="0" {...field} />
            </FormControl>
            <FormMessage />
          </FormItem>
        )}
      />
    </div>
  )

  const renderStep2 = () => (
    <div className="space-y-4">
      <FormField
        name="hasLoan"
        control={form.control}
        render={({ field }) => (
          <FormItem className="space-y-3">
            <FormLabel>Do you have any Loan?</FormLabel>
            <FormControl>
              <RadioGroup onValueChange={field.onChange} defaultValue={field.value} className="flex flex-row space-x-4">
                <FormItem className="flex items-center space-x-2">
                  <FormControl>
                    <RadioGroupItem value="yes" />
                  </FormControl>
                  <FormLabel className="font-normal">Yes</FormLabel>
                </FormItem>
                <FormItem className="flex items-center space-x-2">
                  <FormControl>
                    <RadioGroupItem value="no" />
                  </FormControl>
                  <FormLabel className="font-normal">No</FormLabel>
                </FormItem>
              </RadioGroup>
            </FormControl>
            <FormMessage />
          </FormItem>
        )}
      />

      {form.watch("hasLoan") === "yes" && (
        <>
          <FormField
            name="numberOfLoans"
            control={form.control}
            render={({ field }) => (
              <FormItem>
                <FormLabel>Number of Loan*</FormLabel>
                <Select onValueChange={field.onChange} defaultValue={field.value}>
                  <FormControl>
                    <SelectTrigger>
                      <SelectValue placeholder="1" />
                    </SelectTrigger>
                  </FormControl>
                  <SelectContent>
                    {[1, 2, 3, 4, 5].map((num) => (
                      <SelectItem key={num} value={num.toString()}>
                        {num}
                      </SelectItem>
                    ))}
                  </SelectContent>
                </Select>
                <FormMessage />
              </FormItem>
            )}
          />

          <FormField
            name="loanType"
            control={form.control}
            render={({ field }) => (
              <FormItem>
                <FormLabel>Loan Type*</FormLabel>
                <Select onValueChange={field.onChange} defaultValue={field.value}>
                  <FormControl>
                    <SelectTrigger>
                      <SelectValue placeholder="Select loan type" />
                    </SelectTrigger>
                  </FormControl>
                  <SelectContent>
                    {loanTypes.map((type) => (
                      <SelectItem key={type} value={type.toLowerCase()}>
                        {type}
                      </SelectItem>
                    ))}
                  </SelectContent>
                </Select>
                <FormMessage />
              </FormItem>
            )}
          />
        </>
      )}

      <FormField
        name="hasCreditCard"
        control={form.control}
        render={({ field }) => (
          <FormItem className="space-y-3">
            <FormLabel>Do you have any Credit Card?</FormLabel>
            <FormControl>
              <RadioGroup onValueChange={field.onChange} defaultValue={field.value} className="flex flex-row space-x-4">
                <FormItem className="flex items-center space-x-2">
                  <FormControl>
                    <RadioGroupItem value="yes" />
                  </FormControl>
                  <FormLabel className="font-normal">Yes</FormLabel>
                </FormItem>
                <FormItem className="flex items-center space-x-2">
                  <FormControl>
                    <RadioGroupItem value="no" />
                  </FormControl>
                  <FormLabel className="font-normal">No</FormLabel>
                </FormItem>
              </RadioGroup>
            </FormControl>
            <FormMessage />
          </FormItem>
        )}
      />

      {form.watch("hasCreditCard") === "yes" && (
        <>
          <FormField
            name="numberOfCards"
            control={form.control}
            render={({ field }) => (
              <FormItem>
                <FormLabel>Number of Cards*</FormLabel>
                <Select onValueChange={field.onChange} defaultValue={field.value}>
                  <FormControl>
                    <SelectTrigger>
                      <SelectValue placeholder="1" />
                    </SelectTrigger>
                  </FormControl>
                  <SelectContent>
                    {[1, 2, 3, 4, 5].map((num) => (
                      <SelectItem key={num} value={num.toString()}>
                        {num}
                      </SelectItem>
                    ))}
                  </SelectContent>
                </Select>
                <FormMessage />
              </FormItem>
            )}
          />

          <FormField
            name="cardType"
            control={form.control}
            render={({ field }) => (
              <FormItem>
                <FormLabel>Card type*</FormLabel>
                <Select onValueChange={field.onChange} defaultValue={field.value}>
                  <FormControl>
                    <SelectTrigger>
                      <SelectValue placeholder="Select Card type" />
                    </SelectTrigger>
                  </FormControl>
                  <SelectContent>
                    {cardTypes.map((type) => (
                      <SelectItem key={type} value={type.toLowerCase()}>
                        {type}
                      </SelectItem>
                    ))}
                  </SelectContent>
                </Select>
                <FormMessage />
              </FormItem>
            )}
          />
        </>
      )}
    </div>
  )

  const renderStep3 = () => (
    <div className="space-y-4">
      <FormField
        name="name"
        control={form.control}
        render={({ field }) => (
          <FormItem>
            <FormLabel>Your Name*</FormLabel>
            <FormControl>
              <Input placeholder="Enter your name" {...field} />
            </FormControl>
            <FormMessage />
          </FormItem>
        )}
      />

      <FormField
        name="email"
        control={form.control}
        render={({ field }) => (
          <FormItem>
            <FormLabel>Your Email Address*</FormLabel>
            <FormControl>
              <Input placeholder="Enter your email address" {...field} />
            </FormControl>
            <FormMessage />
          </FormItem>
        )}
      />

      <FormField
        name="phone"
        control={form.control}
        render={({ field }) => (
          <FormItem>
            <FormLabel>Your Phone Number*</FormLabel>
            <FormControl>
              <Input placeholder="+880" {...field} />
            </FormControl>
            <FormMessage />
          </FormItem>
        )}
      />

      <FormField
        name="termsAccepted"
        control={form.control}
        render={({ field }) => (
          <FormItem className="flex flex-row items-start space-x-3 space-y-0">
            <FormControl>
              <Checkbox checked={field.value} onCheckedChange={field.onChange} />
            </FormControl>
            <div className="space-y-1 leading-none">
              <FormLabel>
                By Clicking The Submit Below You Agree on Our{" "}
                <a href="#" className="text-primary hover:underline">
                  Terms & Conditions
                </a>
              </FormLabel>
            </div>
            <FormMessage />
          </FormItem>
        )}
      />
    </div>
  )

  const renderStepIndicator = () => (
    <div className="relative mb-8">
      <div className="absolute left-0 top-1/2 h-0.5 w-full -translate-y-1/2 bg-border">
        <div
          className="h-full bg-primary transition-all duration-300"
          style={{ width: `${((step - 1) / 2) * 100}%` }}
        />
      </div>
      <div className="relative z-10 flex justify-between">
        {[1, 2, 3].map((stepNumber) => (
          <div
            key={stepNumber}
            className={cn(
              "flex h-8 w-8 items-center justify-center rounded-full border-2 bg-background",
              stepNumber < step
                ? "border-primary text-primary"
                : stepNumber === step
                  ? "border-primary"
                  : "border-border",
            )}
          >
            {stepNumber < step ? <Check className="h-4 w-4" /> : <span>{stepNumber}</span>}
          </div>
        ))}
      </div>
      <div className="mt-2 flex justify-between text-sm">
        <span className={cn(step >= 1 ? "text-primary" : "")}>Step 1</span>
        <span className={cn(step >= 2 ? "text-primary" : "")}>Step 2</span>
        <span className={cn(step >= 3 ? "text-primary" : "")}>Step 3</span>
      </div>
    </div>
  )

  return (
    <Card className="w-full max-w-2xl mx-auto p-6">
      <div className="flex justify-between items-center mb-6">
        <h1 className="text-2xl font-semibold">Find the best Personal Loan for you</h1>
        <Button
          variant="ghost"
          size="icon"
          className="rounded-full"
          onClick={() => {
            // Handle close
          }}
        >
          <X className="h-4 w-4" />
        </Button>
      </div>

      {renderStepIndicator()}

      <Form {...form}>
        <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-6">
          {step === 1 && renderStep1()}
          {step === 2 && renderStep2()}
          {step === 3 && renderStep3()}

          <div className="flex justify-between pt-4">
            {step > 1 && (
              <Button type="button" variant="outline" onClick={() => setStep((prev) => prev - 1)}>
                Back
              </Button>
            )}
            <Button
              type="button"
              className="ml-auto"
              onClick={() => {
                if (step < 3) {
                  setStep((prev) => prev + 1)
                } else {
                  form.handleSubmit(onSubmit)()
                }
              }}
            >
              {step === 3 ? "Submit" : "Continue"}
            </Button>
          </div>
        </form>
      </Form>
    </Card>
  )
}

